"vundle
set nocompatible
filetype off
filetype plugin on

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
"git interface
Plugin 'tpope/vim-fugitive'
"filesystem
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim' 

"html
"  isnowfy only compatible with python not python3
Plugin 'isnowfy/python-vim-instant-markdown'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'nelstrom/vim-markdown-preview'
"python sytax checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Pydiction'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'scrooloose/syntastic'

"auto-completion stuff
Plugin 'klen/python-mode'
Plugin 'Raimondi/delimitMate'
Plugin 'Valloric/YouCompleteMe'
Plugin 'klen/rope-vim'
"Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
""code folding
"Plugin 'tmhedberg/SimpylFold'

"Colors!!!
Plugin 'altercation/vim-colors-solarized'
Plugin 'jnurmine/Zenburn'
Plugin 'dracula/vim'
Plugin 'tyrannicaltoucan/vim-deep-space'
Plugin 'trevordmiller/nova-vim'

" codi.vim
" The interactive scratchpad for hackers
" This is very cool plugin
Plugin 'metakirby5/codi.vim'

" Vim for Dockerfile
Plugin 'ekalinin/Dockerfile.vim'

" Autoformat
Plugin 'Chiel92/vim-autoformat'

" Line style
" Plugin'liuchengxu/eleline.vim'

" vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme='papercolor'
" show absolute file path in status line
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
" show tab number in tab line
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

set laststatus=2
" set guifont=Source\ Code\ Pro\ for\ Powerline:h12
set noshowmode


filetype plugin indent on    " enables filetype detection
let g:SimpylFold_docstring_preview = 1

"autocomplete
let g:ycm_autoclose_preview_window_after_completion=1

"custom keys
let mapleader=" "
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"
call togglebg#map("<F5>")
"colorscheme space-vim-dark
set t_Co=256
"set guifont=YaHeiConsolas:h11
set termguicolors

let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

set list lcs=tab:\|\

"I don't like swap files
set noswapfile

"turn on numbering
set number

"python with virtualenv support
py << EOF
import os.path
import sys
import vim
if 'VIRTUA_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
  #  execfile(activate_this, dict(__file__=activate_this))../
  execfile(activate_this, dict(__file__=activate_this))
EOF

"it would be nice to set tag files by the active virtualenv here
":set tags=~/mytags "tags for ctags and taglist
"omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete

"------------Start Python PEP 8 stuff----------------
" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" Set the default file encoding to UTF-8:
set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,gbk,gb18030,gb2312,cp936,usc-bom,euc-jp

" For full syntax highlighting:
let python_highlight_all=1
syntax on
syntax enable

" Keep indentation level from previous line:
autocmd FileType python set autoindent

" make backspaces more powerfull
set backspace=indent,eol,start


"Folding based on indentation:
"autocmd FileType python set foldmethod=indent
"use space to open folds
"nnoremap <space> za 
"----------Stop python PEP 8 stuff--------------

"js stuff"
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

"haskell,puppet,ruby,yml stuff"
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 softtabstop=2

" system clipboard
set clipboard=unnamed


" NERDTree config
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif

" If you copy the code,it will make the code retain the original indentation
" Â¶ÇÊûú‰Ω†Â§çÂà∂‰ª£Á†ÅÊó∂ÔºåÂÆÉÂ∞Ü‰Ωø‰ª£Á†Å‰øùÊåÅÂéüÂßãÁº©Ëøõ
set pastetoggle=<F3>



""""""""""""""""""""""""""""""""""""""
"Quickly Run
"""""""""""""""""""""""""""""""""""""
map <F10> :call CompileRunGcc()<CR>
fun! CompileRunGcc()
	exec "w"
if &filetype == 'C'
	exec "!g++ % -o %<"
	exec "!time ./%<"
elseif &filetype == 'cpp'
	exec "!g++ %  -o %<"
	exec "!time ./%<"
elseif &filetype == 'java'
	exec "!java %"
	exec "!time java %<"
elseif &filetype == 'sh'
	:!time bash %
elseif &filetype == 'python'
	exec "!time python %"
elseif &filetype == 'go'
"	exec "!go build %<"
	exec "!time go run %"
elseif &filetype == 'mkd'
	exec "!~/.vim/markdown.pl % > %.html &"
	exec "!chromium %.html &"
endif
endfunc





" for python docstring
" Raimondi/delimitMate config
au FileType python let b:delimitMate_nesting_quotes = ['"']
" ÂÖ≥Èó≠Êüê‰∫õÁ±ªÂûãÊñá‰ª∂ÁöÑËá™Âä®Ë°•ÂÖ®
" au FileType mail let b:delimitMate_autoclose = 0


" python-mode config
let g:pymode_intent = 1 "‰ΩøÁî®Áº©ËøõÈ£éÊ†º‰∏∫pep8
let g:pymode_folding = 0 "ÂÖ≥Èó≠‰ª£Á†ÅÊäòÂè†ÂäüËÉΩ


if has("autocmd")  " ÊâìÂºÄÊó∂ÂÖâÊ†áÊîæÂú®‰∏äÊ¨°ÈÄÄÂá∫Êó∂ÁöÑ‰ΩçÁΩÆ
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    	\    exe "normal g'\"" |
    	\ endif
endif


set smartcase 	" ÊêúÁ¥¢Êó∂ÔºåÊô∫ËÉΩÂ§ßÂ∞èÂÜô
set ignorecase 	" ÊêúÁ¥¢Êó∂ÔºåÂøΩÁï•Â§ßÂ∞èÂÜô
set incsearch 	" incremental search
set autochdir 	" ÊâìÂºÄÊñá‰ª∂Êó∂ÔºåËá™Âä® cd Âà∞Êñá‰ª∂ÊâÄÂú®ÁõÆÂΩï


" Autoformat
nnoremap <F6> :Autoformat<CR>
let g:formatter_yapf_style = 'pep8'
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
