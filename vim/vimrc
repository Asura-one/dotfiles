"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 通用设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ' '   " 定义<leader>键
set nocompatible      " 设置不兼容原始vi模式
filetype on           " 设置开启文件类型侦测
filetype plugin on    " 设置加载对应文件类型的插件
set noeb              " 关闭错误的提示
syntax enable         " 开启语法高亮功能
syntax on             " 自动语法高亮
set t_Co=256          " 开启256色支持
set showcmd           " select模式下显示选中的行数
set ruler             " 总是显示光标位置
set laststatus=2      " 总是显示状态栏
set number            " 开启行号显示
set cursorline        " 高亮显示当前行
set ttimeoutlen=0     " 设置<ESC>键响应时间
" set virtualedit=all                " 允许光标出现在最后一个字符的后面
set autochdir         " 打开文件时，自动 cd 到文件所在目录
set noshowmode        " 不显示左下角状态栏
set clipboard=unnamed " system clipboard
let autosave=0        " autosave
set showmatch         " 高亮标识匹配的括号
set scrolloff=5       " 光标距离窗口上下保留5行
" set spell spelllang=en_us          " 开启内置拼写检查
set undofile          " 历史记录

for s:path in split(glob('~/.vim/my_plugin/*.vim'), "\n")
  exe 'source ' . s:path
endfor

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码缩进和排版
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent                 "  设置自动缩进
set cindent                    "  设置使用C/C++语言的自动缩进方式
set cinoptions=g0,:0,N-s,(0    "  设置C/C++语言的具体缩进方式
set smartindent                "  智能的选择对其方式
filetype indent on             "  自适应不同语言的智能缩进
filetype plugin indent on      "  enables filetype detection
set expandtab                  "  将制表符扩展为空格
set tabstop=4                  "  设置编辑时制表符占用空格数
set shiftwidth=4               "  设置格式化时制表符占用空格数
set softtabstop=4              "  设置4个空格为制表符
set smarttab                   "  在行和段开始处使用制表符
"set nowrap                     "  禁止折行
set backspace=indent,eol,start "  使用回车键正常处理indent,eol,start等
set sidescroll=10              "  设置向右滚动字符数
set nofoldenable               "  禁用折叠代码

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 代码补全
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmenu                         "  vim自身命名行模式智能补全
set wildmode=full
set completeopt=menu,menuone "  补全时不显示窗口，只显示补全列表

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 搜索设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch   "  高亮显示搜索结果
set incsearch  "  开启实时搜索功能
set ignorecase "  搜索时大小写不敏感
set smartcase  "  搜索时，智能大小写

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 缓存设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup            " 设置不备份
set noswapfile          " 禁止生成临时文件
set autoread            " 文件在vim之外修改过，自动重新读入
set autowrite           " 设置自动保存
set confirm             " 在处理未保存或只读文件的时候，弹出确认

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 编码设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set langmenu=zh_CN.UTF-8
lang messages zh_CN.UTF-8
language messages zh_CN.UTF-8
set helplang=cn
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,euc-jp,latin1

" write with sudo
cabbrev w!! w !sudo tee %


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件列表
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'zivyangll/git-blame.vim'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }}
Plug 'Yggdroot/indentLine'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'cocopon/iceberg.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'godlygeek/tabular'
Plug 'skywind3000/asyncrun.vim'
Plug 'w0rp/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'mbbill/undotree'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'z0mbix/vim-shfmt' , { 'for': 'sh' }
Plug 'ervandew/supertab'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'rking/ag.vim'
Plug 'mileszs/ack.vim'
" color
Plug 'arcticicestudio/nord-vim'
Plug 'liuchengxu/space-vim-dark'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'ayu-theme/ayu-vim'
Plug 'rakr/vim-one'
Plug 'mhartington/oceanic-next'
Plug 'joshdick/onedark.vim'
Plug 'voldikss/vim-translate-me'
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors 皮肤
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set term=xterm-256color
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"set termguicolors
let g:onedark_termcolors=256
let g:onedark_color_overrides = {"black": {"gui": "#1F2D3A", "cterm": "NONE", "cterm16": "0"}}
color onedark
hi CursorLine cterm=NONE ctermbg=black ctermfg=NONE guibg=black guifg=NONE " 设置行高亮颜色
hi Search cterm=NONE ctermfg=NONE ctermbg=8 " 设置搜索高亮颜色
hi Visual cterm=NONE ctermfg=NONE ctermbg=0 " 设置Visual 模式高亮颜色
hi BadWhitespace ctermbg=red guibg=red " 使用红色显示多余空格


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Coc.nvim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes
let g:node_client_debug = 1
"let g:coc_global_extensions = ['coc-ultisnips']
let g:coc_watch_extensions = ['coc-snippets']
"let g:coc_trace_client = 1
let g:coc_node_path = '/usr/local/bin/node'
"let g:coc_node_args = ['--nolazy', '--inspect=6045']
let g:coc_auto_copen = 0
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python 虚拟环境支持
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

"omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete

hi pythonSelf  ctermfg=68  guifg=#5f87d7 cterm=bold gui=bold

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python pep8
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

autocmd BufNewFile,BufRead *.md,*.markdown,*.mmd  nested setlocal filetype=markdown

" for different file types
augroup filetype_formats
  au!

  au FileType help setlocal nu

  au BufNewFile,BufRead *.{vim,vimrc}
        \ setlocal foldmethod=marker |
        \ setlocal tabstop=2         |
        \ setlocal softtabstop=2     |
        \ setlocal shiftwidth=2

  au BufNewFile,BufRead *.py
       \ setlocal autoindent      |
       \ setlocal nowrap          |
       \ setlocal sidescroll=5    |
       \ let g:python_highlight_all = 1 |
       \ setlocal complete+=t |
       \ setlocal formatoptions-=t |
       \ setlocal commentstring=#%s |
       \ setlocal define=^\s*\\(def\\\\|class\\)
       " \ set listchars+=precedes:<,extends:>
       \ set textwidth=79 |

  au BufNewFile,BufRead *.js,*.html,*.css,*.yml
      \ setlocal tabstop=2     |
      \ setlocal softtabstop=2 |
      \ setlocal shiftwidth=2

  " useless whitespaces
  au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.{vim,vimrc}
      \ highlight BadWhitespace ctermbg=red guibg=darkred |
      \ match BadWhitespace /\s\+$/

augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree 文件浏览
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F2> :NERDTreeToggle<CR>

augroup nerd_behaviours
  au!
  autocmd StdinReadPre * let s:std_in = 1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree() && b:NERDTreeType == "primary") | q | endif
  autocmd tableave * if exists('g:loaded_nerd_tree') | execute 'NERDTreeClose' | endif
augroup END

let NERDTreeIgnore=['\.pyc$', '\~$', '\.swp', '__pycache__[[dir]]']
let NERDTreeShowBookmarks=1
let g:nerdtree_tabs_open_on_console_startup=0
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
let NERDTreeCascadeSingleChildDir=0
let g:NERDTreeNaturalSort = 1
let g:NERDTreeShowLineNumbers = 0
let g:NERDTreeShowHidden = 1

""""""""""""""""""""""""""""""""""""""
"Quickly Run
"""""""""""""""""""""""""""""""""""""
nnoremap <F5> :call <SID>compile_and_run()<CR>
func! s:compile_and_run()
	exec 'w'
	if &filetype ==# 'c'
		exec 'gcc -o3 % -o %<'
		exec '!time ./%<'
	elseif &filetype ==# 'cpp'
		exec '!g++ -o3 % -o %<'
		exec '!time ./%<'
	elseif &filetype ==# 'java'
		exec '!javac %'
		exec '!time java %<'
	elseif &filetype ==# 'sh'
		exec 'AsyncRun! time bash %'
	elseif &filetype ==# 'python'
		if search('@profile')
			exec 'AsyncRun kernprof -l -v %'
			exec 'copen'
			exec 'wincmd p'
		elseif search('set_trace()')
			exec '!python3 %'
		else
			exec 'AsyncRun -raw python3 %'
			exec 'copen'
			exec 'wincmd p'
		endif
	elseif &filetype ==# 'html'
		exec '!chromium-browser % &'
	elseif &filetype ==# 'go'
		' exec '!go build %<'
		exec '!time go run %'
" 	elseif &filetype ==# 'md'
" 		exec '!~/.vim/markdown.pl % > %.html &'
" 		exec 'AsyncRun chromium %.html %'
	endif
endfunc

" 打开时光标放在上次退出时的位置
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

let tlist_vimwiki_settings = 'wiki;h:Headers'
let tlist_confluencewiki_settings = 'confluencewiki;h:Headers'
let tlist_markdown_settings = 'markdown;h:Headers'
let tlist_textile_settings = 'textile;h:Headers'
let tlist_html_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_xhtml_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_velocity_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_css_settings = 'css;c:Classes;o:Objects(ID);t:Tags(Elements)'
let tlist_javascript_settings = 'javascript;f:Functions;c:Classes;o:Objects'
let tlist_json_settings = 'json;o:Objects'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" indentLine
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_char='|'
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'

function! RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-devicons 文件图标
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
" let g:webdevicons_enables_airline_tabline=1
" let g:webdevicons_enable_airline_statusline=1
let g:WebDevIconsUnicodeDecorateFolderNodes=1
let g:DevIconsEnableFoldersOpenClose=1

" python autopep8
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ale 代码检查
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示侧边栏
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
let g:ale_fix_on_save = 0
let g:ale_linters_explicit = 1
"改变状态栏信息格式
"改变命令行消息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
			\ 'bash':['shellcheck'],
			\ 'ansible':['ansible-lint'],
			\ 'dockerfile':['hadolint'],
			\ 'markdown':['alex'],
			\ 'python':['flake8'],
			\ 'vim':['vint'],
			\ 'yaml':['yamllint'],
			\}
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

nmap <buffer> <F7> :ALEFix<CR>

let g:ale_fixers = {
    \ 'python': ['autopep8', 'yapf'],
    \ 'bash': ['shfmt'],
    \ }
"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>d 查看错误或警告的详细信息
nmap <Leader>d :ALEDetail<CR>


" git blame
nmap <Leader>c :<C-u>call gitblame#echo()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimwiki wiki工具
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vimwiki_menu = '' " 不在菜单栏显示Vimwiki
let g:vimwiki_diary_months = {
    \ 1: '一月', 2: '二月', 3: '三月', 4: '四月', 5: '五月', 6: '六月',
    \ 7: '七月', 8: '八月', 9: '九月', 10: '十月', 11: '十一月', 12: '十二月'
    \ }
let g:vimwiki_use_mouse = 1
let g:vimwiki_camel_case = 0
let g:vimwiki_CJK_length = 1
let g:vimwiki_use_calendar = 0
let g:vimwiki_global_ext = 0
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_timestamp_format='%Y年%m月%d日 %H:%M:%S'
let g:vimwiki_user_htmls = "search.html,404.html"

let develop_notes = {} " 个人开发笔记
let develop_notes.path = '~/test/test/develop-notes' " 笔记路径
let develop_notes.syntax = 'markdown'
let develop_notes.ext = '.md'

let g:vimwiki_list = [develop_notes]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" undotree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("persistent_undo")
	set undodir=~/.undodir/
	set undofile
endif


" Is better way to zoom windows in Vim than ZoomWin?
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
"nnoremap <silent> <Leader>z :ZoomToggle<CR>
nnoremap <silent> <c-w>z :ZoomToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips 代码片段补全
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:UltiSnipsExpandTrigger       = "<c-e>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsSnippetsDir = '/home/asura/.vim/mysnippets'
let g:UltiSnipsSnippetDirectories=["mysnippets"]
let g:UltiSnipsEditSplit='vertical'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>
au FileType *.md, *.markdown :UltiSnipsAddFiletypes markdown

" AsyncRun
autocmd  QuickFixCmdPost  *  botright  copen  8
let g:asyncrun_encs = 'utf-8'
let g:vimmake_build_encoding = 'utf-8'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 键位映射
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <cr> :noh<CR><CR>:<backspace> " 取消搜索高亮
set pastetoggle=<F3> " 如果你复制代码时，它将使代码保持原始缩进
map <leader>r :e<CR> " 刷新文件

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:mkdp_browser = "/usr/bin/chromium-browser"
let g:mkdp_auto_start = 1

"----------------------------------------------------------------------
" LeaderF
"----------------------------------------------------------------------
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_ReverseOrder = 1

let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','.hg'],
            \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
			\ }

let g:Lf_MruFileExclude = ['*.so', '*.exe', '*.py[co]', '*.sw?', '~$*', '*.bak', '*.tmp', '*.dll']
let g:Lf_MruMaxFiles = 2048
let g:Lf_ShortcutF = '<c-p>'
noremap <c-n> :Leaderf mru --regex<cr>
noremap <F4> :LeaderfFunction!<cr>
noremap <F4> :LeaderfBufTag!<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:LF_DefaultExternalTool = 'ag'

"noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg --stayOpen --recall %s ", expand("<cword>"))<CR>

nmap <C-f> :Ag! <cword> %<Left><CR>
nmap <leader>f :Ag! <cword><CR>

"----------------------------------------------------------------------
" SuperTab
"----------------------------------------------------------------------
let g:SuperTabDefaultCompletionType = '<C-n>'

" vim-translate-me
" <Leader>t 翻译光标下的文本，在命令行回显
nmap <silent> <Leader>t <Plug>Translate
vmap <silent> <Leader>t <Plug>TranslateV
" Leader>w 翻译光标下的文本，在窗口中显示
nmap <silent> <Leader>w <Plug>TranslateW
vmap <silent> <Leader>w <Plug>TranslateWV
" Leader>r 替换光标下的文本为翻译内容
nmap <silent> <Leader>r <Plug>TranslateR
vmap <silent> <Leader>r <Plug>TranslateRV
let g:vtm_default_engine='google'
hi def link vtmQuery             Identifier
hi def link vtmParaphrase        Statement
hi def link vtmPhonetic          Special
hi def link vtmExplain           Comment
hi def link vtmPopupNormal       NormalFloat
