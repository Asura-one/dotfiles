if has('python')
endif
" write with sudo
cabbrev w!! w !sudo tee %

"vundle
set nocompatible
filetype off
filetype plugin indent on    " enables filetype detection

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
"git interface
Plugin 'tpope/vim-fugitive'
Plugin 'zivyangll/git-blame.vim'
"filesystem
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'ctrlpvim/ctrlp.vim'

"html
"  isnowfy only compatible with python not python3
Plugin 'isnowfy/python-vim-instant-markdown'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'nelstrom/vim-markdown-preview'
"python sytax checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Pydiction'
Plugin 'vim-scripts/indentpython.vim'
" Ê∑ªÂä†pythonÁ±ªÂûãÊ≥®Èáä
Plugin 'sillybun/vim-autodoc'

"python autopep8
Plugin 'tell-k/vim-autopep8'

" IndentLine
Plugin 'Yggdroot/indentLine'

"auto-completion stuff
Plugin 'Raimondi/delimitMate'
Plugin 'Valloric/YouCompleteMe'
"code folding
"Plugin 'tmhedberg/SimpylFold'

"Colors!!!
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'jnurmine/Zenburn'
" Plugin 'dracula/vim'
" Plugin 'tyrannicaltoucan/vim-deep-space'
" Plugin 'trevordmiller/nova-vim'
" Colors Nord
Plugin 'arcticicestudio/nord-vim'
Plugin 'liuchengxu/space-vim-dark'

" codi.vim
" The interactive scratchpad for hackers
" This is very cool plugin
Plugin 'metakirby5/codi.vim'

" Vim for Dockerfile
Plugin 'ekalinin/Dockerfile.vim'

" vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" vim-taglist
Plugin 'vim-scripts/taglist.vim'

" file icons
Plugin 'ryanoasis/vim-devicons'

" line up text
Plugin 'godlygeek/tabular'

" Asynchronous Lint Engine
Plugin 'skywind3000/asyncrun.vim'
Plugin 'w0rp/ale'

"Plugin 'sillybun/vim-repl'

" A Personal Wiki For Vim
Plugin 'vimwiki/vimwiki'

Plugin 'mbbill/undotree'

call vundle#end()

"custom keys
let mapleader=" "

" /* base */
" ÊòæÁ§∫Ê≠£Âú®ËæìÂÖ•ÁöÑÂëΩ‰ª§
set showcmd

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = 'ÓÇ∞'
let g:airline#extensions#tabline#left_alt_sep = 'ÓÇ±'
let g:airline_theme='papercolor'
" show absolute file path in status line
"let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#%{ALEGetStatusLine()}'
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
" show tab number in tab line
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#fnametruncate = 16
let g:airline#extensions#tabline#fnamecollapse = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = 'ÓÇ°'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

" let g:lightline = { 'colorscheme': 'PaperColor' }
set laststatus=2
color nord
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_uniform_status_lines = 1
let g:nord_comment_brightness = 20
let g:nord_uniform_diff_background = 1

" set guifont=Source\ Code\ Pro\ for\ Powerline:h12
set noshowmode


let g:SimpylFold_docstring_preview = 1

" YouCompleteMe
"autocomplete
"let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_python_binary_path = 'python3'
let g:ycm_seed_indetifiers_with_syntax=1
let g:ycm_server_log_level = 'info'
let g:ycm_server_python_interpreter='/usr/bin/python3'
let g:ycm_show_diagnostcs_ui = 0
let g:ycm_confirm_extra_conf = 0
set completeopt=longest,menu,menuone
noremap <c-z> <NOP>
let g:ycm_key_invoke_completion= '<c-z>'
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <expr> <CR>       pumvisible() ? '<C-y>' : '\<CR>'
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
let g:ycm_filetype_whitelist = {
			\ 'c':1,
			\ 'cpp':1,
			\ 'php':1,
			\ 'python':1,
			\ 'sh':1,
			\ 'yaml':1,
			\ 'zsh':1,
			\ }

set t_Co=256
"set termguicolors
"let g:neosolarized_contrast = "normal"
"let g:neosolarized_visibility = "normal"
"let g:neosolarized_bold = 1
"let g:neosolarized_underline = 1
"let g:neosolarized_italic = 0

"I don't like swap files
set noswapfile

" Ëá™Âä®Âä†ËΩΩÊñá‰ª∂
set autoread

" Ëá™Âä®‰øùÂ≠òÊñá‰ª∂
set autowriteall

"turn on numbering
set number

"python with virtualenv support
py << EOF
import os.path
import sys
import vim
if 'VIRTUA_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
  #  execfile(activate_this, dict(__file__=activate_this))../
  execfile(activate_this, dict(__file__=activate_this))
EOF

"it would be nice to set tag files by the active virtualenv here
":set tags=~/mytags "tags for ctags and taglist
"omnicomplete
"autocmd FileType python set omnifunc=jedi#completions
autocmd FileType python set omnifunc=pythoncomplete#Complete

hi pythonSelf  ctermfg=68  guifg=#5f87d7 cterm=bold gui=bold

"------------Start Python PEP 8 stuff----------------
" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" Set the default file encoding to UTF-8:
set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,gbk,gb18030,gb2312,cp936,usc-bom,euc-jp

" For full syntax highlighting:
let python_highlight_all=1
syntax on
syntax enable

" Keep indentation level from previous line:
autocmd FileType python set autoindent

" make backspaces more powerfull
set backspace=indent,eol,start

" for different file types
augroup filetype_formats
  au!

  au FileType help setlocal nu

  au BufNewFile,BufRead *.{vim,vimrc}
        \ setlocal foldmethod=marker |
        \ setlocal tabstop=2         |
        \ setlocal softtabstop=2     |
        \ setlocal shiftwidth=2

  au BufNewFile,BufRead *.py
       \ setlocal autoindent      |
       \ setlocal nowrap          |
       \ setlocal sidescroll=5    |
       \ let g:python_highlight_all = 1 |
       \ setlocal complete+=t |
       \ setlocal formatoptions-=t |
       \ setlocal nowrap |
       \ setlocal commentstring=#%s |
       \ setlocal define=^\s*\\(def\\\\|class\\)
       " \ set listchars+=precedes:<,extends:>
       \ set textwidth=79 |

  au BufNewFile,BufRead *.js,*.html,*.css,*.yml
      \ setlocal tabstop=2     |
      \ setlocal softtabstop=2 |
      \ setlocal shiftwidth=2

  " autocmd BufNewFile,BufRead *.{md,mkd,mkdn,mark*}
  "   \ set filetype=markdown

  " useless whitespaces
  au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.{vim,vimrc}
      \ highlight BadWhitespace ctermbg=red guibg=darkred |
      \ match BadWhitespace /\s\+$/

augroup END

" system clipboard
set clipboard=unnamed

" NERDTree config
map <F2> :NERDTreeToggle<CR>

augroup nerd_behaviours
  au!
  autocmd StdinReadPre * let s:std_in = 1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree() && b:NERDTreeType == "primary") | q | endif
  autocmd tableave * if exists('g:loaded_nerd_tree') | execute 'NERDTreeClose' | endif
augroup END

let NERDTreeIgnore=['\.pyc$', '\~$', '\.swp', '__pycache__[[dir]]']
let NERDTreeShowBookmarks=1
let g:nerdtree_tabs_open_on_console_startup=0
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ "Unknown"   : "?"
    \ }
let NERDTreeCascadeSingleChildDir=0
let g:NERDTreeNaturalSort = 1
let g:NERDTreeShowLineNumbers = 0
let g:NERDTreeShowHidden = 1

" Â¶ÇÊûú‰Ω†Â§çÂà∂‰ª£Á†ÅÊó∂ÔºåÂÆÉÂ∞Ü‰Ωø‰ª£Á†Å‰øùÊåÅÂéüÂßãÁº©Ëøõ
set pastetoggle=<F3>



""""""""""""""""""""""""""""""""""""""
"Quickly Run
"""""""""""""""""""""""""""""""""""""
map <F4> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec 'w'
	if &filetype ==# 'c'
		exec 'gcc -o3 % -o %<'
		exec '!time ./%<'
	elseif &filetype ==# 'cpp'
		exec '!g++ -o3 % -o %<'
		exec '!time ./%<'
	elseif &filetype ==# 'java'
		exec '!javac %'
		exec '!time java %<'
	elseif &filetype ==# 'sh'
		:!time bash %
	elseif &filetype ==# 'python'
		if search('@profile')
			exec 'AsyncRun kernprof -l -v %'
			exec 'copen'
			exec 'wincmd p'
		elseif search('set_trace()')
			exec '!python3 %'
		else
			exec 'AsyncRun -raw python3 %'
			exec 'copen'
			exec 'wincmd p'
		endif
	elseif &filetype ==# 'html'
		exec '!firefox % &'
	elseif &filetype ==# 'go'
		' exec '!go build %<'
		exec '!time go run %'
	elseif &filetype ==# 'mkd'
		exec '!~/.vim/markdown.pl % > %.html &'
		exec '!firefox %.html &'
	endif
endfunc



" for python docstring
" Raimondi/delimitMate config
au FileType python let b:delimitMate_nesting_quotes = ['"']
" ÂÖ≥Èó≠Êüê‰∫õÁ±ªÂûãÊñá‰ª∂ÁöÑËá™Âä®Ë°•ÂÖ®
" au FileType mail let b:delimitMate_autoclose = 0


if has("autocmd")  " ÊâìÂºÄÊó∂ÂÖâÊ†áÊîæÂú®‰∏äÊ¨°ÈÄÄÂá∫Êó∂ÁöÑ‰ΩçÁΩÆ
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    	\    exe "normal g'\"" |
    	\ endif
endif


set smartcase 	" ÊêúÁ¥¢Êó∂ÔºåÊô∫ËÉΩÂ§ßÂ∞èÂÜô
set ignorecase 	" ÊêúÁ¥¢Êó∂ÔºåÂøΩÁï•Â§ßÂ∞èÂÜô
set incsearch 	" incremental search
set autochdir 	" ÊâìÂºÄÊñá‰ª∂Êó∂ÔºåËá™Âä® cd Âà∞Êñá‰ª∂ÊâÄÂú®ÁõÆÂΩï

" Taglist
" let Tlist_Show_One_File=1    "Âè™ÊòæÁ§∫ÂΩìÂâçÊñá‰ª∂ÁöÑtags
let Tlist_WinWidth=40        "ËÆæÁΩÆtaglistÂÆΩÂ∫¶
let Tlist_Exit_OnlyWindow=1  "tagListÁ™óÂè£ÊòØÊúÄÂêé‰∏Ä‰∏™Á™óÂè£ÔºåÂàôÈÄÄÂá∫Vim
let Tlist_Use_Right_Window=1 "Âú®VimÁ™óÂè£Âè≥‰æßÊòæÁ§∫taglistÁ™óÂè£
map <F5> :TlistToggle<CR>


let tlist_vimwiki_settings = 'wiki;h:Headers'
let tlist_confluencewiki_settings = 'confluencewiki;h:Headers'
let tlist_markdown_settings = 'markdown;h:Headers'
let tlist_textile_settings = 'textile;h:Headers'
let tlist_html_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_xhtml_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_velocity_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_css_settings = 'css;c:Classes;o:Objects(ID);t:Tags(Elements)'
let tlist_javascript_settings = 'javascript;f:Functions;c:Classes;o:Objects'
let tlist_json_settings = 'json;o:Objects'

" indentLine
let g:indentLine_char='|'
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'

set autoindent

function! RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

" python
"function HeadePython()
"	call setline(1, "#!/usr/bin/env python3")
"	call append(1, "# -*- coding: utf-8 -*-")
"	call append(2, "")
"	call append(3, '"""')
"	call append(4, "Description: ")
"	call append(5, "Author: Asura")
"	call append(6, "E-mail: zishuheimixhou@163.com")
"	call append(7, "Date: " . strftime("%Y-%m-%d %H:%M:%S"))
"	call append(8, "Python release: 2.7")
"	call append(9, '"""')
"endfunction
"autocmd bufnewfile *.py call HeadePython()

" vim-devicons configuration
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
let g:webdevicons_enables_airline_tabline=1
let g:webdevicons_enable_airline_statusline=1
let g:WebDevIconsUnicodeDecorateFolderNodes=1
let g:DevIconsEnableFoldersOpenClose=1

" python autopep8
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" autosave
let autosave=0

" ale
" ÊòæÁ§∫‰æßËæπÊ†è
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
let g:ale_fix_on_save = 1
" Ëá™ÂÆö‰πâÂõæÊ†á
let g:ale_sign_error = '‚úó'
let g:ale_sign_warning = '‚ö°'

autocmd FileType python noremap <buffer> <F7> :ALEFix<CR>

let g:ale_fixers = {
    \ 'python': ['add_blank_lines_for_python_control_statements','autopep8','isort','yapf','remove_trailing_lines','trim_whitespace']
    \ }
"ÊôÆÈÄöÊ®°Âºè‰∏ãÔºåspÂâçÂæÄ‰∏ä‰∏Ä‰∏™ÈîôËØØÊàñË≠¶ÂëäÔºåsnÂâçÂæÄ‰∏ã‰∏Ä‰∏™ÈîôËØØÊàñË≠¶Âëä
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>d Êü•ÁúãÈîôËØØÊàñË≠¶ÂëäÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
nmap <Leader>d :ALEDetail<CR>
"ÊîπÂèòÁä∂ÊÄÅÊ†è‰ø°ÊÅØÊ†ºÂºè
"let g:ale_statusline_format = ['‚®â %d', '‚ö† %d', '‚¨• ok']
"ÊîπÂèòÂëΩ‰ª§Ë°åÊ∂àÊÅØ
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
			\ 'bash':['shellcheck'],
			\ 'ansible':['ansible-lint'],
			\ 'dockerfile':['hadolint'],
			\ 'markdown':['alex'],
			\ 'python':['flake8'],
			\ 'vim':['vint'],
			\ 'yaml':['yamllint'],
			\}
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1

" repl
"autocmd Filetype python nnoremap <leader>r :REPLToggle<Cr>
"
"let g:rep_row_width = 10            " Á™óÂè£ÂÆΩÂ∫¶
"let g:sendtorepl_invoke_key = 'ww'  " ‰º†ÈÄÅ‰ª£Á†ÅÂø´Êç∑ÈîÆÔºåÈªòËÆ§ww
"let g:repl_at_top = 0               " 0Ê†áËØÜÂá∫Áé∞Âú®‰∏ãÊñπÔºå1Ê†áËØÜÂá∫Áé∞Âú®‰∏äÊñπ
"let g:repl_stayatrepl_when_open = 0 " ÊâìÂºÄREPLÊó∂ÊòØÂõûÂà∞Ê∫êÊñá‰ª∂ (1) ËøòÊòØÂÅúÁïôÂú®REPLÁ™óÂè£‰∏≠ (0)
"let g:repl_program = {
"			\ 'python': 'ipython3',
"			\ 'default': 'zsh',
"			\}
"let g:repl_exit_commands = {
"			\ 'python': 'quit()',
"			\ 'bash': 'exit',
"			\ 'zsh': 'exit',
"			\ 'default': 'exit',
"			\}

" auto load vimrc
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" git blame
nmap <Leader>c :<C-u>call gitblame#echo()<CR>

"let mapleader = ","  " map leaderÈîÆËÆæÁΩÆ

" vimwiki
let g:vimwiki_menu = '' " ‰∏çÂú®ËèúÂçïÊ†èÊòæÁ§∫Vimwiki
let g:vimwiki_diary_months = {
    \ 1: '‰∏ÄÊúà', 2: '‰∫åÊúà', 3: '‰∏âÊúà', 4: 'ÂõõÊúà', 5: '‰∫îÊúà', 6: 'ÂÖ≠Êúà',
    \ 7: '‰∏ÉÊúà', 8: 'ÂÖ´Êúà', 9: '‰πùÊúà', 10: 'ÂçÅÊúà', 11: 'ÂçÅ‰∏ÄÊúà', 12: 'ÂçÅ‰∫åÊúà'
    \ }
let g:vimwiki_use_mouse = 1
let g:vimwiki_camel_case = 0
let g:vimwiki_CJK_length = 1
let g:vimwiki_use_calendar = 0
let g:vimwiki_timestamp_format='%YÂπ¥%mÊúà%dÊó• %H:%M:%S'
let g:vimwiki_user_htmls = "search.html,404.html"


let develop_notes = {} " ‰∏™‰∫∫ÂºÄÂèëÁ¨îËÆ∞
let develop_notes.path = '~/test/test/develop-notes' " Á¨îËÆ∞Ë∑ØÂæÑ
let develop_notes.syntax = 'markdown'
let develop_notes.ext = '.md'

let g:vimwiki_list = [develop_notes]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" Âà∑Êñ∞Êñá‰ª∂
map <leader>r :e<CR>


" vim-autodoc
let g:autodoc_display_return_type = 1 " 1Ë°®Á§∫ËæìÂá∫ËøîÂõûÂÄºÁ±ªÂûãÔºå0Ë°®Á§∫‰∏çËæìÂá∫
let g:autodoc_typehint_style = 'pep484' " Ê≥®ÈáäÈ£éÊ†º
let g:autodoc_display_runtime_info = 0 " ÊòØÂê¶ÁªüËÆ°ÂáΩÊï∞ËøêË°å‰ø°ÊÅØ
"map <F2> :RecordParameter<CR>

" undotree
if has("persistent_undo")
	set undodir=~/.undodir/
	set undofile
endif
