"vundle
set nocompatible
filetype off
filetype plugin on

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
"git interface
Plugin 'tpope/vim-fugitive'
Plugin 'zivyangll/git-blame.vim'
"filesystem
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'ctrlpvim/ctrlp.vim'

"html
"  isnowfy only compatible with python not python3
Plugin 'isnowfy/python-vim-instant-markdown'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'nelstrom/vim-markdown-preview'
"python sytax checker
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Pydiction'
Plugin 'vim-scripts/indentpython.vim'
"Plugin 'scrooloose/syntastic'

"python autopep8
Plugin 'tell-k/vim-autopep8'

" IndentLine
Plugin 'Yggdroot/indentLine'

"auto-completion stuff
Plugin 'klen/python-mode'
Plugin 'Raimondi/delimitMate'
Plugin 'Valloric/YouCompleteMe'
Plugin 'klen/rope-vim'
"Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
"code folding
"Plugin 'tmhedberg/SimpylFold'

"Colors!!!
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'jnurmine/Zenburn'
" Plugin 'dracula/vim'
" Plugin 'tyrannicaltoucan/vim-deep-space'
" Plugin 'trevordmiller/nova-vim'
" Colors Nord
" Plugin 'arcticicestudio/nord-vim'

" codi.vim
" The interactive scratchpad for hackers
" This is very cool plugin
Plugin 'metakirby5/codi.vim'

" Vim for Dockerfile
Plugin 'ekalinin/Dockerfile.vim'

" Autoformat
" Plugin 'Chiel92/vim-autoformat'

" vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" vim-taglist
Plugin 'vim-scripts/taglist.vim'

" file icons
Plugin 'ryanoasis/vim-devicons'

" line up text
Plugin 'godlygeek/tabular'

" Asynchronous Lint Engine
" Plugin 'w0rp/ale'

Plugin 'sillybun/vim-repl'

" A Personal Wiki For Vim
Plugin 'vimwiki/vimwiki'

call vundle#end()

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline_theme='papercolor'
" show absolute file path in status line
let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
" show tab number in tab line
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#fnametruncate = 16
let g:airline#extensions#tabline#fnamecollapse = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

" let g:lightline = { 'colorscheme': 'PaperColor' }
set laststatus=2
color nord
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_uniform_status_lines = 1
let g:nord_comment_brightness = 20
let g:nord_uniform_diff_background = 1

" set guifont=Source\ Code\ Pro\ for\ Powerline:h12
set noshowmode


filetype plugin indent on    " enables filetype detection
let g:SimpylFold_docstring_preview = 1

" YouCompleteMe
"autocomplete
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_seed_indetifiers_with_syntax=1
let g:ycm_complete_in_comments=1
let g:ycm_collect_indetifiers_from_comments_and_strings = 0
let g:ycm_server_python_interpreter='/usr/bin/python'
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"inoremap <expr> <CR>       pumvisible() ? '<C-y>' : '\<CR>'
"custom keys
let mapleader=" "
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" call togglebg#map("<F5>")
" color NeoSolarized
"set background=dark
set t_Co=256
"set guifont=YaHei\Consolas\Hybrid\ h11
" set guifont=YaHei\Consolas\ h11
" set termguicolors
let g:neosolarized_contrast = "normal"
let g:neosolarized_visibility = "normal"
let g:neosolarized_bold = 1
let g:neosolarized_underline = 1
let g:neosolarized_italic = 0


"set list lcs=tab:\|\

"I don't like swap files
set noswapfile

"turn on numbering
set number

"python with virtualenv support
" py << EOF
" import os.path
" import sys
" import vim
" if 'VIRTUA_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   sys.path.insert(0, project_base_dir)
"   activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
"   #  execfile(activate_this, dict(__file__=activate_this))../
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

"it would be nice to set tag files by the active virtualenv here
":set tags=~/mytags "tags for ctags and taglist
"omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete

hi pythonSelf  ctermfg=68  guifg=#5f87d7 cterm=bold gui=bold

"------------Start Python PEP 8 stuff----------------
" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4
au BufRead,BufNewFile *.py,*.pyw set expandtab
au BufRead,BufNewFile *.py set softtabstop=4

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" Set the default file encoding to UTF-8:
set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,gbk,gb18030,gb2312,cp936,usc-bom,euc-jp

" For full syntax highlighting:
let python_highlight_all=1
syntax on
syntax enable

" Keep indentation level from previous line:
autocmd FileType python set autoindent

" make backspaces more powerfull
set backspace=indent,eol,start


"Folding based on indentation:
"autocmd FileType python set foldmethod=indent
"use space to open folds
"nnoremap <space> za
"----------Stop python PEP 8 stuff--------------

"js stuff"
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

"haskell,puppet,ruby,yml stuff"
autocmd FileType haskell,puppet,ruby,yml setlocal expandtab shiftwidth=2 tabstop=2

" system clipboard
set clipboard=unnamed

" NERDTree config
map <F2> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swp']
let NERDTreeShowBookmarks=1
let g:nerdtree_tabs_open_on_console_startup=0
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
let NERDTreeCascadeSingleChildDir=0

" If you copy the code,it will make the code retain the original indentation
" 如果你复制代码时，它将使代码保持原始缩进
set pastetoggle=<F3>



""""""""""""""""""""""""""""""""""""""
"Quickly Run
"""""""""""""""""""""""""""""""""""""
map <F4> :call CompileRunGcc()<CR>
fun! CompileRunGcc()
	exec "w"
if &filetype == 'C'
	exec "!g++ % -o %<"
	exec "!time ./%<"
elseif &filetype == 'cpp'
	exec "!g++ %  -o %<"
	exec "!time ./%<"
elseif &filetype == 'java'
	exec "!java %"
	exec "!time java %<"
elseif &filetype == 'sh'
	:!time bash %
elseif &filetype == 'python'
	exec "!time /usr/bin/env python3 %"
elseif &filetype == 'go'
	exec "!go build %<"
	exec "!time go run %"
elseif &filetype == 'mkd'
	exec "!~/.vim/markdown.pl % > %.html &"
	exec "!chromium %.html &"
endif
endfunc





" for python docstring
" Raimondi/delimitMate config
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
" au FileType mail let b:delimitMate_autoclose = 0


" python-mode config
let g:pymode_intent = 1 "使用缩进风格为pep8
let g:pymode_folding = 0 "关闭代码折叠功能

"python3
let g:syntastic_python_python_exec = '/usr/bin/python3'
let g:syntastic_python_checkers = ['flake8']


if has("autocmd")  " 打开时光标放在上次退出时的位置
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    	\    exe "normal g'\"" |
    	\ endif
endif


set smartcase 	" 搜索时，智能大小写
set ignorecase 	" 搜索时，忽略大小写
set incsearch 	" incremental search
set autochdir 	" 打开文件时，自动 cd 到文件所在目录


" Autoformat
" nnoremap <F6> :Autoformat<CR>
" let g:formatter_yapf_style = 'pep8'
" let g:autoformat_autoindent = 0
" let g:autoformat_retab = 0
" let g:autoformat_remove_trailing_spaces = 0
" let g:autoformat_verbosemode=1

" Taglist
" let Tlist_Show_One_File=1    "只显示当前文件的tags
let Tlist_WinWidth=40        "设置taglist宽度
let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
let Tlist_Use_Right_Window=1 "在Vim窗口右侧显示taglist窗口
map <F5> :TlistToggle<CR>


let tlist_vimwiki_settings = 'wiki;h:Headers'
let tlist_confluencewiki_settings = 'confluencewiki;h:Headers'
let tlist_markdown_settings = 'markdown;h:Headers'
let tlist_textile_settings = 'textile;h:Headers'
let tlist_html_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_xhtml_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_velocity_settings = 'html;h:Headers;o:Objects(ID);c:Classes'
let tlist_css_settings = 'css;c:Classes;o:Objects(ID);t:Tags(Elements)'
let tlist_javascript_settings = 'javascript;f:Functions;c:Classes;o:Objects'
let tlist_json_settings = 'json;o:Objects'

" indentLine
let g:indentLine_char='|'
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#A4E57E'

set autoindent

function! RemoveTrailingWhitespace()
    if &ft != "diff"
        let b:curcol = col(".")
        let b:curline = line(".")
        silent! %s/\s\+$//
        silent! %s/\(\s*\n\)\+\%$//
        call cursor(b:curline, b:curcol)
    endif
endfunction
autocmd BufWritePre * call RemoveTrailingWhitespace()

" python
" function HeadePython()
" 	call setline(1, "#!/usr/bin/env python")
" 	call append(1, "# -*- coding: utf-8 -*-")
" 	call append(2, "")
" 	call append(3, '"""')
" 	call append(4, "Description: ")
" 	call append(5, "Author: Asura")
" 	call append(6, "E-mail: zishuheimixhou@163.com")
" 	call append(7, "Date: " . strftime("%Y-%m-%d %H:%M:%S"))
" 	call append(8, "Python release: 2.7")
" 	call append(9, '"""')
" endfunction
" autocmd bufnewfile *.py call HeadePython()

" vim-devicons configuration
let g:webdevicons_enable=1
let g:webdevicons_enable_nerdtree=1
let g:webdevicons_enables_airline_tabline=1
let g:webdevicons_enable_airline_statusline=1
let g:WebDevIconsUnicodeDecorateFolderNodes=1
let g:DevIconsEnableFoldersOpenClose=1

" python autopep8
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" autosave
let autosave=0

" ale
" let g:ale_sign_error = '✗'
" let g:ale_sign_warning = '⚡'
"
" autocmd FileType python noremap <buffer> <F7> :ALEFix<CR>
"
" let g:ale_fixers = {
"     \ 'python': ['add_blank_lines_for_python_control_statements','autopep8','isort','yapf','remove_trailing_lines','trim_whitespace']
"     \ }

" repl
" autocmd Filetype python nnoremap <leader>r :REPLToggle<Cr>

" let g:rep_row_width = 10            " 窗口宽度
" let g:sendtorepl_invoke_key = 'ww'  " 传送代码快捷键，默认ww
" let g:repl_at_top = 0               " 0标识出现在下方，1标识出现在上方
" let g:repl_stayatrepl_when_open = 0 " 打开REPL时是回到源文件 (1) 还是停留在REPL窗口中 (0)

" auto load vimrc
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" git blame
nmap <Leader>c :<C-u>call gitblame#echo()<CR>

let mapleader = ","  " map leader键设置

" vimwiki
let g:vimwiki_menu = '' " 不在菜单栏显示Vimwiki
let g:vimwiki_diary_months = {
    \ 1: '一月', 2: '二月', 3: '三月', 4: '四月', 5: '五月', 6: '六月',
    \ 7: '七月', 8: '八月', 9: '九月', 10: '十月', 11: '十一月', 12: '十二月'
    \ }
let g:vimwiki_use_mouse = 1
let g:vimwiki_camel_case = 0
let g:vimwiki_CJK_length = 1
let g:vimwiki_use_calendar = 0
let g:vimwiki_timestamp_format='%Y年%m月%d日 %H:%M:%S'
let g:vimwiki_user_htmls = "search.html,404.html"


let develop_notes = {} " 个人开发笔记
let develop_notes.path = '~/test/test/develop-notes' " 笔记路径
let develop_notes.syntax = 'markdown'
let develop_notes.ext = '.md'

let g:vimwiki_list = [develop_notes]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
